generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Holder {
  owner  String @id
  amount Int
  mints  Dino[]
}

model Dino {
  mint        String      @id
  name        String
  pfp         String
  gif         String
  holderOwner String?
  rarity      Int?
  attributes  Attributes?
  herd        Herd[]
  holder      Holder?     @relation(fields: [holderOwner], references: [owner])

  @@index([holderOwner])
}

model Attributes {
  mint       String @id
  species    String
  skin       String
  color      String
  motion     String
  mood       String
  background String
  layerCount String
  back       String
  belly      String
  pattern    String
  details    String
  dino       Dino   @relation(fields: [mint], references: [mint])

  @@index([mint])
}

model Herd {
  id      String @id @default(uuid())
  owner   String
  tier    Int
  type    String
  matches String
  rarity  Int
  herd    Dino[]
}

model DinoToHerd {
  A String
  B String

  @@unique([A, B], map: "_DinoToHerd_AB_unique")
  @@index([B], map: "_DinoToHerd_B_index")
  @@map("_DinoToHerd")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  defaultAddress String    @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  discord        Discord?
  twitter        Twitter?
  wallets        Wallet[]
}

model Discord {
  username    String @unique
  global_name String
  image_url   String
  User        User   @relation(fields: [userId], references: [id])
  userId      String @unique
}

model Twitter {
  username    String @unique
  global_name String
  image_url   String
  User        User   @relation(fields: [userId], references: [id])
  userId      String @unique
}

model Wallet {
  address String  @id @unique
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?

  @@index([userId])
}
